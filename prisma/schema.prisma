generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement()) @map("user_id")
  username      String   @unique
  email         String   @unique
  password      String
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")
  companyName   String?  @map("company_name")
  streetAddress String   @map("street_address")
  state         String
  postCode      String   @map("post_code")
  phoneNumber   String   @unique @map("phone_number")
  cityCode      String   @map("city_code")
  countryCode   String   @map("country_code")
  status        Status   @default(PENDING)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  country Country @relation(fields: [countryCode], references: [code])
  city    City    @relation(fields: [cityCode], references: [code])
  Plate   Plate[]
  Bid     Bid[]

  @@map("users")
}

model Country {
  code String @unique
  name String @unique

  cities City[]
  users  User[]

  @@id([code, name])
  @@map("countries")
}

model City {
  code        String @unique
  name        String @unique
  countryCode String @map("country_code")

  country Country @relation(fields: [countryCode], references: [code])
  users   User[]

  @@id([code, name])
  @@map("cities")
}

enum Status {
  PENDING
  APPROVED
  DECLINE
}

model Plate {
  id          Int          @id @default(autoincrement())
  combination String       @unique
  askingPrice Decimal      @default(0) @map("asking_price") @db.Decimal(18, 2)
  comments    String?
  purpose     PlatePurpose
  userId      Int          @map("user_id")
  status      Status       @default(PENDING)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  plateListing PlateListing?
  plateAuction PlateAuction?

  @@map("plates")
}

model PlateListing {
  id             Int     @id @default(autoincrement())
  isOpenForPrice Boolean @default(false) @map("open_for_price")
  settlePrice    Decimal @default(0) @map("settle_price") @db.Decimal(18, 2)

  plate Plate @relation(fields: [id], references: [id])

  @@map("plates_listings")
}

model PlateAuction {
  id        Int      @id @default(autoincrement())
  isReserve Boolean  @default(false) @map("is_reserve")
  Plate     Plate?   @relation(fields: [id], references: [id])
  Auction   Auction?

  @@map("plates_auctions")
}

enum PlatePurpose {
  LISTING
  AUCTION
}

model Auction {
  id            Int      @id @default(autoincrement())
  plateId       Int      @unique @map("plate_id")
  startingPrice Decimal  @default(0) @map("starting_price") @db.Decimal(18, 2)
  endAt         DateTime @map("end_at")

  plateAuction PlateAuction @relation(fields: [plateId], references: [id])

  bids Bid[]

  @@map("auctions")
}

model Bid {
  id     Int     @id @default(autoincrement())
  price  Decimal
  userId Int

  user      User     @relation(fields: [userId], references: [id])
  Auction   Auction? @relation(fields: [auctionId], references: [id])
  auctionId Int?

  @@map("bids")
}
