generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement()) @map("user_id")
  username       String     @unique
  email          String     @unique
  password       String
  firstName      String     @map("first_name")
  lastName       String     @map("last_name")
  companyName    String?    @map("company_name")
  streetAddress  String     @map("street_address")
  state          String
  postCode       String     @map("post_code")
  phoneNumber    String     @unique @map("phone_number")
  cityCode       String     @map("city_code")
  countryCode    String     @map("country_code")
  status         UserStatus @default(PENDING)
  drivingLicense String?    @map("driving_license_uri")
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @updatedAt @map("updated_at")

  country Country @relation(fields: [countryCode], references: [code])
  city    City    @relation(fields: [cityCode], references: [code])
  Plate   Plate[]
  Bid     Bid[]
  Offer   Offer[]

  @@map("users")
}

model Country {
  code String @unique
  name String @unique

  cities City[]
  users  User[]

  @@id([code, name])
  @@map("countries")
}

model City {
  code        String @unique
  name        String @unique
  countryCode String @map("country_code")

  country Country @relation(fields: [countryCode], references: [code])
  users   User[]

  @@id([code, name])
  @@map("cities")
}

model Plate {
  id          Int          @id @default(autoincrement())
  combination String       @unique @db.VarChar(4)
  askingPrice Decimal      @default(0) @map("asking_price") @db.Decimal(18, 2)
  comments    String?
  purpose     PlatePurpose
  userId      Int          @map("user_id")
  status      PlateStatus  @default(PENDING)
  numberPlate String
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id])

  plateListing PlateListing?
  plateAuction PlateAuction?

  @@fulltext([combination])
  @@map("plates")
}

model PlateListing {
  id             Int     @id @default(autoincrement())
  isOpenForPrice Boolean @default(false) @map("open_for_price")
  settlePrice    Decimal @default(0) @map("settle_price") @db.Decimal(18, 2)

  plate  Plate   @relation(fields: [id], references: [id])
  offers Offer[]

  @@map("plates_listings")
}

model PlateAuction {
  id        Int      @id @default(autoincrement())
  isReserve Boolean  @default(false) @map("is_reserve")
  plate     Plate?   @relation(fields: [id], references: [id])
  auction   Auction?

  @@map("plates_auctions")
}

enum PlatePurpose {
  LISTING
  AUCTION
}

model Auction {
  id      Int      @id @default(autoincrement())
  plateId Int      @unique @map("plate_id")
  endAt   DateTime @map("end_at") @db.Timestamp()

  plateAuction PlateAuction @relation(fields: [plateId], references: [id])

  bids Bid[]

  @@map("auctions")
}

model Bid {
  id        Int       @id @default(autoincrement())
  price     Decimal   @db.Decimal(18, 2)
  userId    Int
  auctionId Int
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  user    User    @relation(fields: [userId], references: [id])
  Auction Auction @relation(fields: [auctionId], references: [id])

  @@map("bids")
}

model Offer {
  id             Int         @id @default(autoincrement())
  price          Decimal     @db.Decimal(18, 2)
  userId         Int         @map("user_id")
  plateListingId Int         @map("plate_listing_id")
  status         OfferStatus @default(PENDING)
  counter        Decimal     @default(0) @db.Decimal(18, 2)
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id])
  PlateListing PlateListing @relation(fields: [plateListingId], references: [id])

  @@index([status])
  @@map("offers")
}

enum OfferStatus {
  PENDING
  APPROVE
  DECLINE
  COUNTER
}

enum UserStatus {
  PENDING
  APPROVED
  DECLINE
}

enum PlateStatus {
  PENDING
  APPROVED
  IN_AUCTION
  DECLINE
  SOLD
}
