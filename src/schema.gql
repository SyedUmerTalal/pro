# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input ApproveAuctionPlateInput {
  endAt: DateTime!
  id: Int
  startingPrice: Float! = 0
}

input ApproveListingPlateInput {
  id: Int
}

type City {
  code: String!
  name: String!
}

type Country {
  cities: [City!]!
  code: String!
  name: String!
}

input CountryArgs {
  countryCode: String
}

input CreateAuctionPlateInput {
  askingPrice: Float!
  combination: String!
  comments: String!
  isReserve: Boolean!
}

input CreateListingPlateInput {
  askingPrice: Float!
  combination: String!
  comments: String!
  isOpenForPrice: Boolean
  settlePrice: Float = 0
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeclinePlateInput {
  id: Int
}

input FindPlateInput {
  id: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResult {
  accessToken: String!
}

type Mutation {
  approveAuctionPlate(approveAuctionPlateInput: ApproveAuctionPlateInput!): Plate!
  approveListingPlate(approveListingPlate: ApproveListingPlateInput!): Plate!
  approveUser(userApproveArgs: UserApproveArgs!): User!
  createAuctionPlate(createAuctionPlateInput: CreateAuctionPlateInput!): Plate!
  createListingPlate(createListingPlateInput: CreateListingPlateInput!): Plate!
  declinePlate(declinePlateInput: DeclinePlateInput!): Plate!
  login(loginInput: LoginInput!): LoginResult!
  registerUser(registerUserInput: RegisterUserInput!): User!
  removeUser(userDeleteArgs: UserDeleteInput!): User!
}

type Plate {
  askingPrice: Float!
  combination: String!
  comments: String!
  detail: PlateUnion
  id: Int!
  status: Status!
  user: User!
}

type PlateAuction {
  id: Int!
  isReserve: Boolean!
}

type PlateListing {
  id: Int!
  isOpenForPrice: Boolean
  settlePrice: Float
}

union PlateUnion = PlateAuction | PlateListing

type Query {
  countries(countryArgs: CountryArgs): [Country!]!
  plate(findPlateInput: FindPlateInput!): Plate!
  plates: [Plate!]!
  users(userFilterInput: UserFilterInput!): [User!]!
}

input RegisterUserInput {
  cityCode: String!
  companyName: String!
  countryCode: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
  postCode: String!
  state: String!
  streetAddress: String!
  username: String!
}

enum Status {
  APPROVED
  DECLINE
  PENDING
}

type User {
  cityName: String!
  companyName: String!
  countryName: String!
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  phoneNumber: String!
  postCode: String!
  state: String!
  status: Status!
  streetAddress: String!
  username: String!
}

input UserApproveArgs {
  id: Int
}

input UserDeleteInput {
  id: Int!
}

input UserFilterInput {
  id: Int
  status: Status
}