# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Auction {
  bids: [Bid!]!
  endAt: DateTime!
  id: Int!
  startingPrice: Float!
}

type Bid {
  createdAt: DateTime!
  currentBid: Float
  id: Int!
  price: Int!
  user: User!
}

type City {
  code: String!
  name: String!
}

type Country {
  cities: [City!]!
  code: String!
  name: String!
}

input CreateAuctionInput {
  endAt: DateTime!
  startingPrice: Float! = 0
}

input CreateAuctionPlateInput {
  askingPrice: Float!
  combination: String!
  comments: String!
  isReserve: Boolean!
}

input CreateBidInput {
  auctionId: Int!
  price: Int! = 0
}

input CreateListingPlateInput {
  askingPrice: Float!
  combination: String!
  comments: String!
  isOpenForPrice: Boolean
  settlePrice: Float = 0
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeclinePlateInput {
  combination: String
  id: Int
}

input FilterBidInput {
  auctionId: Int
  userId: Int!
}

input FilterPlateInput {
  purpose: PlatePurpose
  status: Status
}

input FilterUserInput {
  status: Status
}

input FindPlateInput {
  combination: String
  id: Int
}

input FindUserInput {
  email: String
  id: Int
  username: String
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResult {
  accessToken: String!
}

type Mutation {
  approveAuctionPlate(data: CreateAuctionInput!, where: FindPlateInput!): Plate!
  approveListingPlate(where: FindPlateInput!): Plate!
  approveUser(where: FindUserInput!): User!
  createAuctionPlate(createAuctionPlateInput: CreateAuctionPlateInput!): Plate!
  createBid(data: CreateBidInput!): Bid!
  createListingPlate(createListingPlateInput: CreateListingPlateInput!): Plate!
  declinePlate(declinePlateInput: DeclinePlateInput!): Plate!
  login(loginInput: LoginInput!): LoginResult!
  registerUser(data: RegisterUserInput!): User!
  removeUser(where: FindUserInput!): User!
}

type Plate {
  askingPrice: Float!
  combination: String!
  comments: String!
  detail: PlateUnion
  id: Int!
  purpose: PlatePurpose!
  status: Status!
  user: User!
}

type PlateAuction {
  auction: Auction
  id: Int!
  isReserve: Boolean!
}

type PlateListing {
  id: Int!
  isOpenForPrice: Boolean
  settlePrice: Float
}

enum PlatePurpose {
  AUCTION
  LISTING
}

union PlateUnion = PlateAuction | PlateListing

type Query {
  countries(countryCode: String): [Country!]!
  findAllBids(where: FilterBidInput!): [Bid!]!
  plate(findPlateInput: FindPlateInput!): Plate!
  plates(where: FilterPlateInput): [Plate!]!
  user(where: FindUserInput!): User
  users(where: FilterUserInput): [User!]!
}

input RegisterUserInput {
  cityCode: String!
  companyName: String!
  countryCode: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phoneNumber: String!
  postCode: String!
  state: String!
  streetAddress: String!
  username: String!
}

enum Status {
  APPROVED
  DECLINE
  PENDING
}

type User {
  city: String!
  companyName: String!
  country: String!
  email: String!
  firstName: String!
  id: Int!
  lastName: String!
  phoneNumber: String!
  postCode: String!
  state: String!
  status: Status!
  streetAddress: String!
  username: String!
}